# AMD64 NodePool - Intel 兼容性
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: nodepool-amd64
spec:
  weight: 50  # 较低优先级 - 兼容性需求时使用
  template:
    metadata:
      labels:
        node-type: "amd64"
        arch: "amd64"
        cost-tier: "standard"
    spec:
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: nodeclass-amd64
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot", "on-demand"]  # Spot 优先
        - key: node.kubernetes.io/instance-type
          operator: In
          values: 
            # 通用实例
            - m7i.large      # Intel 4th Gen, 2 vCPU, 8 GB
            - m7i.xlarge     # Intel 4th Gen, 4 vCPU, 16 GB
            - m7i.2xlarge    # Intel 4th Gen, 8 vCPU, 32 GB
            - m7i.4xlarge    # Intel 4th Gen, 16 vCPU, 64 GB
            - m6i.large      # Intel 3rd Gen, 2 vCPU, 8 GB
            - m6i.xlarge     # Intel 3rd Gen, 4 vCPU, 16 GB
            - m6i.2xlarge    # Intel 3rd Gen, 8 vCPU, 32 GB
            - m6i.4xlarge    # Intel 3rd Gen, 16 vCPU, 64 GB
            - m6a.large      # AMD EPYC 3rd Gen, 2 vCPU, 8 GB
            - m6a.xlarge     # AMD EPYC 3rd Gen, 4 vCPU, 16 GB
            - m6a.2xlarge    # AMD EPYC 3rd Gen, 8 vCPU, 32 GB
            - m6a.4xlarge    # AMD EPYC 3rd Gen, 16 vCPU, 64 GB
            
            # 计算优化
            - c7i.large      # Intel 4th Gen, 2 vCPU, 4 GB
            - c7i.xlarge     # Intel 4th Gen, 4 vCPU, 8 GB
            - c7i.2xlarge    # Intel 4th Gen, 8 vCPU, 16 GB
            - c7i.4xlarge    # Intel 4th Gen, 16 vCPU, 32 GB
            - c6i.large      # Intel 3rd Gen, 2 vCPU, 4 GB
            - c6i.xlarge     # Intel 3rd Gen, 4 vCPU, 8 GB
            - c6i.2xlarge    # Intel 3rd Gen, 8 vCPU, 16 GB
            - c6i.4xlarge    # Intel 3rd Gen, 16 vCPU, 32 GB
            - c6a.large      # AMD EPYC 3rd Gen, 2 vCPU, 4 GB
            - c6a.xlarge     # AMD EPYC 3rd Gen, 4 vCPU, 8 GB
            - c6a.2xlarge    # AMD EPYC 3rd Gen, 8 vCPU, 16 GB
            - c6a.4xlarge    # AMD EPYC 3rd Gen, 16 vCPU, 32 GB
            
            # 内存优化
            - r6i.large      # Intel 3rd Gen, 2 vCPU, 16 GB
            - r6i.xlarge     # Intel 3rd Gen, 4 vCPU, 32 GB
            - r6i.2xlarge    # Intel 3rd Gen, 8 vCPU, 64 GB
            - r6i.4xlarge    # Intel 3rd Gen, 16 vCPU, 128 GB
            - r6a.large      # AMD EPYC 3rd Gen, 2 vCPU, 16 GB
            - r6a.xlarge     # AMD EPYC 3rd Gen, 4 vCPU, 32 GB
            - r6a.2xlarge    # AMD EPYC 3rd Gen, 8 vCPU, 64 GB
            - r6a.4xlarge    # AMD EPYC 3rd Gen, 16 vCPU, 128 GB
        - key: topology.kubernetes.io/zone
          operator: In
          values: ["ap-southeast-1a", "ap-southeast-1b", "ap-southeast-1c"]
  limits:
    cpu: 500
    memory: 500Gi
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 30s

---
# AMD64 NodeClass
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: nodeclass-amd64
spec:
  # 使用 Amazon Linux 2023
  amiFamily: AL2023
  amiSelectorTerms:
    - name: "amazon-eks-node-al2023-x86_64-standard-1.33-*"
  
  instanceStorePolicy: RAID0
  userData: |
    #!/bin/bash
    /usr/bin/nodeadm init --cluster-name eks-karpenter-env
    
  # 子网和安全组使用 karpenter.sh/discovery 标签
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "eks-karpenter-env"
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "eks-karpenter-env"
  
  instanceProfile: "KarpenterNodeInstanceProfile-eks-karpenter-env"

  metadataOptions:
    httpPutResponseHopLimit: 2    # 允许容器访问IMDS
  
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        deleteOnTermination: true
